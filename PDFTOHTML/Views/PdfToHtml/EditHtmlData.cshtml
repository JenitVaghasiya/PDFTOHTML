
@{
    ViewBag.Title = "EditHtmlData";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/Scripts/html-js/codemirror/codemirror.css">
<style type="text/css">

    .button {
        font-size: 10px;
        text-transform: uppercase;
        text-decoration: none;
        color: rgb(80,80,80);
        border: transparent;
        background-color: rgb(235,235,235);
        margin: 2px;
        padding: 8px 10px;
        cursor: pointer;
    }

        .button:hover {
            color: rgb(235,235,235);
            background-color: rgb(80,80,80);
        }

        .button path {
            stroke: rgb(80,80,80);
        }

        .button:hover path {
            stroke: rgb(235,235,235);
        }

    #preview {
        position: relative;
        left: 25%;
        top: 0px;
        width: 70%;
        height: 500px;
        padding: 2%;
    }

    #editor {
        position: absolute;
        width: 50%;
        height: 500px;
        display: none
    }

        #editor .CodeMirror {
            height: 100%;
            font-size: 14px;
            background-color: rgba(255,255,255,0.85);
        }

        #editor .CodeMirror-scroll {
            height: 100%;
        }

        #editor .CodeMirror div.CodeMirror-selected {
            background: rgba(0,0,0,0.1);
        }

        #editor .CodeMirror-focused div.CodeMirror-selected {
            background: rgba(0,0,255,0.1);
        }

        #editor .CodeMirror .errorLine {
            background: rgba(255,0,0,0.25);
        }

        #editor .CodeMirror .esprima-error {
            color: #f00;
            text-align: right;
            padding: 0px 20px;
        }

    #toolbar {
        position: absolute;
        top: 0;
        right: 0;
        text-align: right;
        z-index: 10; /* CodeMirror sets z-index */
    }

    #popup {
        position: absolute;
        color: rgb(235,235,235);
        padding: 20px 20px 20px 20px;
        background-color: rgb(80,80,80);
        z-index: 20; /* CodeMirror sets z-index */
    }

    .html-editor-panel {
        margin: 0;
    }

        .html-editor-panel .html-editor-panel-1 {
            float: left !important;
            width: 50% !important;
            overflow: hidden !important;
        }

        .html-editor-panel .html-editor-panel-1 {
            float: left !important;
            width: 50% !important;
            overflow: hidden !important;
        }
</style>


<h2>Html View</h2>

<div class="row">
    <div class="col-md-12">
        <div class="col-md-4"></div>
        <div class="col-md-4 text-center">
            <button class="btn btn-primary btn-sm" id="btnSkip">Skip</button>
            <button class="btn btn-primary btn-sm" id="btnSaveDetails">Save</button>
            <button class="btn btn-primary btn-sm" id="btnAddAnchorLink">Add File</button>
        </div>
        <div class="col-md-4"></div>
    </div>
    <br />
    <div class="col-md-12 html-editor-panel">
        <br />
        <br />
        <div id="preview" class="html-editor-panel-1"></div>
        <div id="editor" class="html-editor-panel-2"></div>
        @*<div id="toolbar"></div>*@
        <div id="popup"></div>
    </div>
</div>

<div id="pdfhtmlcode" style="display:none">
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

    <style>
        .custom-modal-dialog {
            width: 80% !important;
        }
    </style>

    @Html.Raw(ViewBag.ConvertedHtml)

    <div class="modal fade" id="pdf-viewer-custom-Popup" tabindex="-1" role="dialog" data-backdrop="static" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog custom-modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">PDF Viewer</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        X
                    </button>
                </div>
                <div class="modal-body">
                    <iframe id="frmPDFViewer" height="750px" width="100%"></iframe>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        $(document).on('click', '.pdf-viewer-popup', function () {
            var getfiledata = $(this).data("fileurl");

            if (getfiledata != null && getfiledata != undefined) {
                $("#frmPDFViewer").removeAttr("src");
                $("#frmPDFViewer").attr("src", getfiledata);
                $("#pdf-viewer-custom-Popup").modal('show');
            }

        });
    </script>
</div>

@section scripts {

    <script type="text/javascript">
        $('#bodycontent').removeClass('container').addClass('container-fluid');
    </script>
    <script src="~/Scripts/html-js/codemirror/codemirror.js"></script>
    <script src="~/Scripts/html-js/codemirror/mode/xml.js"></script>
    <script src="~/Scripts/html-js/codemirror/mode/javascript.js"></script>
    <script src="~/Scripts/html-js/codemirror/mode/css.js"></script>
    <script src="~/Scripts/html-js/codemirror/mode/htmlmixed.js"></script>
    <script src="~/Scripts/html-js/rawinflate.js"></script>
    <script src="~/Scripts/html-js/rawdeflate.js"></script>
    <script src="~/Scripts/html-js/esprima.js"></script>

    <script type="text/javascript">

        window.URL = window.URL || window.webkitURL;


        // deflate

        function decode(string) {

            return RawDeflate.inflate(window.atob(string));

        }

        function encode(string) {

            return window.btoa(RawDeflate.deflate(string));

        }



        var documents = [{
            filename: 'Untitled',
            filetype: 'text/plain',
            autoupdate: true,
            code: $("#pdfhtmlcode").html()
        }];

        $("#pdfhtmlcode").empty();

        if (localStorage.codeeditor !== undefined) {

            documents = JSON.parse(localStorage.codeeditor);

        }

        if (window.location.hash) {

            var hash = window.location.hash.substr(1);
            var version = hash.substr(0, 2);

            if (version == 'A/') {

                alert('That shared link format is no longer supported.');

            } else if (version == 'B/') {

                documents[0].code = decode(hash.substr(2));

            }

        }

        // preview

        var preview = document.getElementById('preview');

        // editor

        var interval;

        var editor = document.getElementById('editor');
        var codemirror = CodeMirror(editor, {

            value: documents[0].code,
            mode: 'text/html',
            lineNumbers: true,
            matchBrackets: true,
            indentWithTabs: true,
            tabSize: 4,
            indentUnit: 4,
            overwrite: true,
            delayingBlurEvent: true,
            selectingText: true
        });

        codemirror.on('change', function () {

            //buttonSave.style.display = '';
            //buttonDownload.style.display = 'none';

            if (documents[0].autoupdate === false) return;

            clearTimeout(interval);
            interval = setTimeout(update, 500);

        });

        var popup = (function () {

            var scope = this;

            var element = document.getElementById('popup');
            element.style.display = 'none';

            var buttonClose = (function () {

                var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                svg.setAttribute('width', 32);
                svg.setAttribute('height', 32);

                var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                path.setAttribute('d', 'M 9,12 L 11,10 L 15,14 L 19,10 L 21,12 L 17,16 L 21,20 L 19,22 L 15,18 L 11,22 L 9,20 L 13,16');
                path.setAttribute('fill', 'rgb(235,235,235)');
                svg.appendChild(path);

                return svg;

            })();

            buttonClose.style.position = 'absolute';
            buttonClose.style.top = '5px';
            buttonClose.style.right = '5px';
            buttonClose.style.cursor = 'pointer';
            buttonClose.addEventListener('click', function (event) {

                scope.hide();

            }, false);
            element.appendChild(buttonClose);

            var content = document.createElement('div');
            element.appendChild(content);

            function update() {

                element.style.left = ((window.innerWidth - element.offsetWidth) / 2) + 'px';
                element.style.top = ((window.innerHeight - element.offsetHeight) / 2) + 'px';

            }

            window.addEventListener('load', update, false);
            window.addEventListener('resize', update, false);

            //

            this.show = function () {

                element.style.display = '';
                update();

            };

            this.hide = function () {

                // element.style.display = 'none';

            };

            this.set = function (value) {

                while (content.children.length > 0) {

                    content.removeChild(content.firstChild);

                }

                content.appendChild(value);

            };

            return this;

        })();


        // events

        document.addEventListener('drop', function (event) {

            event.preventDefault();
            event.stopPropagation();

            var file = event.dataTransfer.files[0];

            documents[0].filename = file.name;
            documents[0].filetype = file.type;

            var reader = new FileReader();

            reader.onload = function (event) {

                codemirror.setValue(event.target.result);

            };

            reader.readAsText(file);

        }, false);

        document.addEventListener('keydown', function (event) {

            if (event.keyCode === 83 && (event.ctrlKey === true || event.metaKey === true)) {

                event.preventDefault();
                save();

            }

            if (event.keyCode === 13 && (event.ctrlKey === true || event.metaKey === true)) {

                update();

            }

            if (event.keyCode === 27) {

                toggle();

            }

        }, false);


        // actions

        function update() {

            var value = codemirror.getValue();

            if (validate(value)) {

                // remove previous iframe

                if (preview.children.length > 0) {

                    preview.removeChild(preview.firstChild);

                }

                //

                var iframe = document.createElement('div');
                iframe.style.width = '100%';
                iframe.style.height = '100%';
                iframe.style.border = '0';
                iframe.style.overflow = 'auto';

                preview.appendChild(iframe);

                var content = iframe;

                value = value.replace('<script>', '<script>if ( window.innerWidth === 0 ) { window.innerWidth = parent.innerWidth; window.innerHeight = parent.innerHeight; }');


                // content.open();
                content.innerHTML  = value;
                // content.close();

            }
            //toggle();
        }

        var errorLines = [];
        var widgets = [];

        function validate(value) {

            return codemirror.operation(function () {

                while (errorLines.length > 0) {

                    codemirror.removeLineClass(errorLines.shift(), 'background', 'errorLine');

                }

                for (var i = 0; i < widgets.length; i++) {

                    codemirror.removeLineWidget(widgets[i]);

                }

                widgets.length = 0;

                // remove html

                var string = '\n';
                var lines = value.split('\n');
                var lineCurrent = 0, lineTotal = lines.length;

                while (lineCurrent < lineTotal && lines[lineCurrent].indexOf('<script>') === -1) {

                    string += '\n';
                    lineCurrent++;

                }

                var lineStart = lineCurrent++;

                while (lineCurrent < lineTotal && lines[lineCurrent].indexOf('<\/script>') === -1) {

                    string += lines[lineCurrent] + '\n';
                    lineCurrent++;

                }

                //

                try {

                    var result = esprima.parse(string, { tolerant: true }).errors;

                    for (var i = 0; i < result.length; i++) {

                        var error = result[i];

                        var message = document.createElement('div');
                        message.className = 'esprima-error';
                        message.textContent = error.message.replace(/Line [0-9]+: /, '');

                        var lineNumber = error.lineNumber - 1;
                        errorLines.push(lineNumber);

                        codemirror.addLineClass(lineNumber, 'background', 'errorLine');

                        var widget = codemirror.addLineWidget(
                            lineNumber,
                            message
                        );

                        widgets.push(widget);

                    }

                } catch (error) {

                    var message = document.createElement('div');
                    message.className = 'esprima-error';
                    message.textContent = error.message.replace(/Line [0-9]+: /, '');

                    var lineNumber = error.lineNumber - 1;
                    errorLines.push(lineNumber);

                    codemirror.addLineClass(lineNumber, 'background', 'errorLine');

                    var widget = codemirror.addLineWidget(
                        lineNumber,
                        message
                    );

                    widgets.push(widget);

                }

                return errorLines.length === 0;

            });

        }

        function save() {

            documents[0].code = codemirror.getValue();

            localStorage.codeeditor = JSON.stringify(documents);

            var blob = new Blob([codemirror.getValue()], { type: documents[0].filetype });
            var objectURL = URL.createObjectURL(blob);
        }

        update();


        $('#btnSaveDetails').unbind().click(function () {

            var requestdata = {
                html: $("#preview").html(),
                filename:'@ViewBag.ConvertedFormatFile'
            };

            $.ajax({
                type: "POST",
                url: "/PdfToHtml/SaveEditedHtml",
                content: "application/json; charset=utf-8",
                dataType: "json",
                data: requestdata,
                success: function (data) {
                    window.location.href = "/PdfToHtml/successfullyconverted?name=" + '@ViewBag.ConvertedFormatFile';
                },
                error: function () {
                }
            });
        });

        $('#btnSkip').unbind().click(function () {
            window.location.href = "/PdfToHtml/successfullyconverted?name=" + '@ViewBag.ConvertedFormatFile';
        });

        var sel, range;
        $("#btnAddAnchorLink").unbind().click(function () {

            if (window.getSelection) {
                sel = window.getSelection();
            } else if (document.getSelection) {
                sel = document.getSelection();
            } else if (document.selection) {
                range = document.selection.createRange();
                sel = range.text;
            }

            $("#txtanchtext").val(sel);
            if ($("#txtanchtext").val() != "") {
                updateTexttoAnchor();
                $("#anchortagpopup").modal('show');
            }
        });

        function replaceSelectedText(replacementText) {
            if (sel) {
                if (sel.rangeCount) {
                    range = sel.getRangeAt(0);
                    range.deleteContents();
                    const el = document.createElement("div");
                    el.innerHTML = replacementText;
                    let frag = document.createDocumentFragment(),
                        node,
                        lastNode;
                    while ((node = el.firstChild)) {
                        lastNode = frag.appendChild(node);
                    }
                    range.insertNode(frag);
                }
            } else if (range) {
                range.innerHTML = replacementText;
            }
        }

        $("#btnsaveAnchortag").unbind().click(function () {

            // Checking whether FormData is available in browser
            if (window.FormData !== undefined) {

                var fileUpload = $("#txtuploadedfile").get(0);
                var files = fileUpload.files;

                if (files.length <= 0) {
                    alert("Please select file");
                    return false;
                }

                // Create FormData object
                var fileData = new FormData();

                // Looping over all files and add it to FormData object
                for (var i = 0; i < files.length; i++) {
                    fileData.append(files[i].name, files[i]);
                }

                // Adding one more key to FormData object
                fileData.append('filepath', '@ViewBag.ConvertedFilePath');
                fileData.append('FileId', '@ViewBag.FileId');

                $.ajax({
                    url: '/PdfToHtml/FileUploadWithAnch',
                    type: "POST",
                    contentType: false, // Not to set any content header
                    processData: false, // Not to process data
                    data: fileData,
                    success: function (result) {

                        if (result.success) {

                            var anchlink = window.location.origin + result.filename;

                            $("#addTag").attr('href', 'javascript:void(0)');
                            $("#addTag").attr('data-fileurl', anchlink);
                            $("#addTag").attr('class', 'pdf-viewer-popup');
                            $("#addTag").removeAttr('id');
                            $('#txtanchlink').val("");
                            $("#txtanchtext").val("");
                            $("#anchortagpopup").modal('hide');
                            //alert(result.message);
                        } else {
                            alert(result.message);
                        }
                    },
                    error: function (err) {
                        alert(err.statusText);
                    }
                });
            } else {
                alert("FormData is not supported.");
            }

        });

        $(".btnCancelAnchortag").unbind().click(function () {
            $('#txtanchlink').val("");
            $("#txtanchtext").val("");
            $('#addTag').contents().unwrap();
            $("#addTag").removeAttr('id');
            $("#anchortagpopup").modal('hide');
        });

        function updateTexttoAnchor() {
            var anchlink = $('#txtanchlink').val();
            if (anchlink == null || anchlink == undefined || anchlink.length <= 0) {
                anchlink = '#';
            }

            var anchortagtext = $("#txtanchtext").val();

            var aTag = document.createElement('a');
            aTag.id = "addTag";
            aTag.setAttribute('href', anchlink);
            aTag.innerText = anchortagtext;

            replaceSelectedText(aTag.outerHTML);
        }
    </script>
}

<div class="modal fade" id="anchortagpopup" tabindex="-1" role="dialog" data-backdrop="static" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add File</h5>
                <button type="button" class="close btnCancelAnchortag">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Text</label>
                    <input type="text" id="txtanchtext" class="form-control" />
                </div>
                @*<div class="form-group">
                        <label>Link</label>
                        <input type="text" id="txtanchlink" class="form-control" />
                    </div>*@
                <div class="form-group">
                    <label>File</label>
                    <input type="file" id="txtuploadedfile" class="form-control" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btnCancelAnchortag" id="btnCancelAnchortag">Close</button>
                <button type="button" class="btn btn-primary" id="btnsaveAnchortag">Add</button>
            </div>
        </div>
    </div>
</div>